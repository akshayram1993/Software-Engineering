/* our_example_5.java */
import java.util.Stack;

/* Generated By:JavaCC: Do not edit this line. our_example_5.java */
/** Simple brace matcher. */
public class our_example_5 implements our_example_5Constants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    our_example_5 parser = new our_example_5(System.in);
    parser.S();
  }

	public static Stack<Integer> stack = new Stack<Integer>();
	static int currentState = 0;

/** Root production. */
  static final public void S() throws ParseException {
		stack.push(0);
		getNextToken();
		boolean done = false;

		while(!done) {
			int kind = token.kind;
			currentState = stack.peek();
			if(currentState == 0 && kind == 1) {
				stack.push(2);
				getNextToken();
			}
			else if(currentState == 1 && kind == 0) {
				done = true;
			}
			else if(currentState == 2 && kind == 3) {
				stack.push(5);
				getNextToken();
			}
			else if(currentState == 3 && kind == 3) {
				stack.push(8);
				getNextToken();
			}
			else if(currentState == 4 && kind == 4) {
				stack.push(7);
				getNextToken();
			}
			else if(currentState == 5 && kind == 3) {
				for(int i = 0; i < 1; i++) {
					stack.pop();
				}

				stack.push(goTo(stack.peek(), "A"));
			}
			else if(currentState == 6 && kind == 2) {
				stack.push(9);
				getNextToken();
			}
			else if(currentState == 7 && kind == 2) {
				for(int i = 0; i < 1; i++) {
					stack.pop();
				}

				stack.push(goTo(stack.peek(), "C"));
			}
			else if(currentState == 8 && kind == 4) {
				for(int i = 0; i < 2; i++) {
					stack.pop();
				}

				stack.push(goTo(stack.peek(), "B"));
			}
			else if(currentState == 9 && kind == 0) {
				for(int i = 0; i < 4; i++) {
					stack.pop();
				}

				stack.push(goTo(stack.peek(), "S"));
			}
			else {
				throw new ParseException();
			}
		}
  }

	public static int goTo(int top, String lhs) {
		if(top == 4 && lhs.equals("C")) {
			return 6;
		}
		else if(top == 0 && lhs.equals("S")) {
			return 1;
		}
		else if(top == 2 && lhs.equals("A")) {
			return 3;
		}
		else if(top == 2 && lhs.equals("B")) {
			return 4;
		}
		else {
			return -1;
		}
	}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public our_example_5TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }

  /** Constructor with InputStream. */
  public our_example_5(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public our_example_5(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new our_example_5TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public our_example_5(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new our_example_5TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
  }

  /** Constructor with generated Token Manager. */
  public our_example_5(our_example_5TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(our_example_5TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[5];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 5; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
